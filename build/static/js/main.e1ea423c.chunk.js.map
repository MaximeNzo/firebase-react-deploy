{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["dotenv","config","silent","process","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","state","task","user","updateInput","event","setState","target","name","value","addTask","preventDefault","collection","add","this","Container","maxWidth","marginTop","marginBottom","className","onSubmit","style","margin","TextField","id","label","variant","onChange","Button","color","type","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAIAA,EAAOC,OAAO,CAAEC,QAAQC,IAExBC,IAASC,cAAc,CACnBC,OAAQH,0CACRI,WAAYJ,gCACZK,YAAaL,uEACbM,UAAWN,gBACXO,cAAeP,4BACfQ,kBAAoBR,eACpBS,MAAOT,4CACPU,cAAeV,iBAGFC,EAAf,EAAeA,IACFU,EAAYV,IAASU,Y,mCC8CrBC,E,4MAtDbC,MAAQ,CACNC,KAAK,GACLC,KAAK,I,EAIPC,YAAc,SAAAC,GACZ,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAGpDC,QAAU,SAAAL,GACRA,EAAMM,iBAENZ,EAAUa,WAAW,QAAQC,IAAI,CAC/BX,KAAM,EAAKD,MAAMC,KACjBC,KAAM,EAAKF,MAAME,OAGnB,EAAKG,SAAS,CAAEJ,KAAM,GAAIC,KAAM,M,4CAGlC,WACE,MAAqBW,KAAKb,MAAnBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,KAEb,OACE,cAACY,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAU,OAAOC,aAAa,OAAvD,SACE,qBAAKC,UAAU,MAAf,SACQ,uBAAMC,SAAUN,KAAKJ,QAArB,UACA,qBAAKW,MAAO,CAACC,OAAQ,QAArB,SAA8B,cAACC,EAAA,EAAD,CAC5BC,GAAG,iBACHC,MAAM,OACNC,QAAQ,WACRlB,KAAK,OACLmB,SAAUb,KAAKV,YACfK,MAAOP,MAGf,uBACM,qBAAKmB,MAAO,CAACC,OAAQ,QAArB,SAA8B,cAACC,EAAA,EAAD,CAC5BC,GAAG,iBACHC,MAAM,OACNC,QAAQ,WACRlB,KAAK,OACLmB,SAAUb,KAAKV,YACfK,MAAON,MACf,uBACU,cAACyB,EAAA,EAAD,CAAQF,QAAQ,YAAYG,MAAM,UAAUC,KAAK,SAAjD,+B,GAjDFC,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e1ea423c.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport dotenv from 'dotenv';\r\ndotenv.config({ silent: process.env.NODE_ENV === 'production' });\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nfirebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId:  process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n  });\r\n\r\n  export default firebase;\r\n  export const firestore = firebase.firestore();","import React from 'react';\nimport './App.css';\nimport { firestore } from \"./firebase\"\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nclass App extends React.Component {\n\n  \n  state = {\n    task:'',\n    user:''\n  }\n\n\n  updateInput = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  addTask = event => {\n    event.preventDefault()\n  \n    firestore.collection(\"test\").add({\n      task: this.state.task,\n      user: this.state.user\n    })\n  \n    this.setState({ task: \"\", user: \"\" })\n  }\n\n  render() {\n    const {task, user} = this.state;\n    \n    return(\n      <Container maxWidth='sm' marginTop='auto' marginBottom='auto'>\n        <div className='App'>\n                <form onSubmit={this.addTask}>\n                <div style={{margin: '1rem'}}><TextField \n                  id=\"outlined-basic\" \n                  label=\"Task\" \n                  variant=\"outlined\" \n                  name='task'\n                  onChange={this.updateInput}\n                  value={task} /></div>\n                \n                \n          <br />\n                <div style={{margin: '1rem'}}><TextField \n                  id=\"outlined-basic\" \n                  label=\"User\" \n                  variant=\"outlined\" \n                  name='user'\n                  onChange={this.updateInput}\n                  value={user} /></div>\n          <br />\n                    <Button variant=\"contained\" color=\"primary\" type='submit'>Submit</Button>\n                </form>\n        </div>\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}